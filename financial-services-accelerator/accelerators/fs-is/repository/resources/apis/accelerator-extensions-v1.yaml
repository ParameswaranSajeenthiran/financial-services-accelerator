openapi: 3.0.1
info:
  title: API contract for financial accelerator extension points in WSO2 IS
  description: This API defines the REST API contract for services that implements logic to extend the Open Data accelerator flow.
  contact:
    name: WSO2
    url: https://wso2.com/solutions/financial-services/open-banking/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: v1.0.0-M4
servers:
  - url: https://virtserver.swaggerhub.com/wso2-f5b/OB4/1.0.0
    description: SwaggerHub API Auto Mocking
security:
  - BasicAuth: [ ]
  - OAuth2: [ ]
tags:
  - name: Client
    description: APIs for dynamically registering/updating client  related extensions
  - name: Consent
    description: APIs for consent flow extensions
  - name: Token
    description: APIs for token flow extensions
  - name: Authorize
    description: APIs for authorize flow extensions
  - name: Error Handling
    description: APIs for handling accelerator errors
paths:
  /map-accelerator-error-response:
    post:
      tags:
        - Error Handling
      summary: map accelerator level error formats to custom error formats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorMapperRequestBody'
            example:
              requestId: Ec1wMjmiG8
              data:
                error:
                  code: "401"
                  description: Invalid client ID provided.
                  operation: consent_create
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForErrorMapper'
              example:
                responseId: Ec1wMjmiG8
                errorCode: 400
                data:
                  customErrorCode: invalid
                  customErrorDescription: Invalid client ID provided.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                errorMessage: invalid_request
                errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                errorMessage: server_error
                errorDescription: Failed to process the response
  /pre-process-client-creation:
    post:
      tags:
        - Client
      summary: handle pre validations & obtain custom data to store in dynamic client registration step
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientProcessRequestBody'
            examples:
              ProcessClientCreation:
                summary: ProcessClientCreation
                value:
                  requestId: Ec1wMjmiG8
                  data:
                    clientData:
                      key: value
                    softwareStatement:
                      key: value
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForClientProcess'
              examples:
                successExample:
                  summary: Success response
                  value:
                    responseId: Ec1wMjmiG8
                    status: SUCCESS
                    data:
                      clientData:
                        key: value
                failedExample:
                  summary: Failed response
                  value:
                    responseId: Ec1wMjmiG8
                    status: ERROR
                    errorCode: 401
                    data:
                      error: invalid_client_metadata
                      errorDescription: Invalid scope values found
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                data:
                  errorMessage: Bad request
                  errorDescription: Request does not comply with the schema
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                data:
                  errorMessage: Internal server error
                  errorDescription: Error occurred while handling the request
  /pre-process-client-update:
    post:
      tags:
        - Client
      summary: handle pre validations & obtain  custom data to store in dynamic client update step
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientProcessRequestBody'
            examples:
              ProcessClientUpdate:
                summary: ProcessClientUpdate
                value:
                  requestId: Ec1wMjmiG8
                  data:
                    clientData:
                      key: value
                    softwareStatement:
                      key: value
                    existingClientData:
                      key: value
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForClientProcess'
              examples:
                successExample:
                  summary: Success response
                  value:
                    responseId: Ec1wMjmiG8
                    status: SUCCESS
                    data:
                      clientData:
                        key: value
                failedExample:
                  summary: Failed response
                  value:
                    status: ERROR
                    errorCode: 400
                    data:
                      error: invalid_client_metadata
                      errorDescription: Invalid scope values found
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                data:
                  errorMessage: Bad request
                  errorDescription: Request does not comply with the schema
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                data:
                  errorMessage: Internal server error
                  errorDescription: Error occurred while handling the request
  /pre-process-client-retrieval:
    post:
      tags:
        - Client
      summary: handle post client retrieval response generation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientProcessRequestBody'
            examples:
              ProcessClientRetrieval:
                summary: ProcessClientRetrieval
                value:
                  requestId: Ec1wMjmiG8
                  data:
                    existingClientData:
                      key: value
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForClientProcess'
              examples:
                successExample:
                  summary: Success response
                  value:
                    responseId: Ec1wMjmiG8
                    status: SUCCESS
                    data:
                      clientData:
                        key: value
                failedExample:
                  summary: Failed response
                  value:
                    status: ERROR
                    errorCode: 400
                    data:
                      error: invalid_client_metadata
                      errorDescription: Invalid scope values found
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                data:
                  errorMessage: Bad request
                  errorDescription: Request does not comply with the schema
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                data:
                  errorMessage: Internal server error
                  errorDescription: Error occurred while handling the request
  /pre-process-consent-creation:
    post:
      tags:
        - Consent
      summary: handle pre validations & obtain custom consent data to be stored
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreProcessConsentCreationRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForPreProcessConsentCreation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                data:
                  errorMessage: invalid_request
                  errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /enrich-consent-creation-response:
    post:
      tags:
        - Consent
      summary: "handle post-consent generation -response generation,validations"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnrichConsentCreationRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForResponseAlternation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: invalid_request
                errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /pre-process-consent-retrieval:
    post:
      tags:
        - Consent
      summary: handle pre-consent retrieval validations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreProcessConsentRetrievalRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForResponseAlternation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: invalid_request
                errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /pre-process-consent-revoke:
    post:
      tags:
        - Consent
      summary: handle pre-consent revocation validations when a TPP calls consent /DELETE
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreProcessConsentRevokeRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForConsentRevocation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: invalid_request
                errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /pre-process-bulk-consent-retrieval:
    post:
      tags:
        - Consent
      summary: handle consent search required extension to fetch additional data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreProcessBulkConsentRetrievalRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForConsentSearch'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: invalid_request
                errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /populate-consent-authorize-screen:
    post:
      tags:
        - Consent
      summary: handle validations before consent  authorization and consent data to load in consent authorization UI
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PopulateConsentAuthorizeScreenRequestBody'
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForPopulateConsentAuthorizeScreen'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: invalid_request
                errorDescription: Permissions are missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /persist-authorized-consent:
    post:
      tags:
        - Consent
      summary: handle consent persistence logic and enrich response with user authorization and account mapping data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistAuthorizedConsentRequestBody'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForPersistAuthorizedConsent'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /validate-consent-access:
    post:
      tags:
        - Consent
      summary: handle custom consent data validations before data access
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateConsentAccessRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200'
              examples:
                successExample:
                  summary: Success response
                  value:
                    responseId: Ec1wMjmiG8
                    status: SUCCESS
                failedExample:
                  summary: Failed response
                  value:
                    status: ERROR
                    errorCode: 401
                    data:
                      errorMessage: invalid_permissions
                      erroreDescription: "The requested  permissions are invalid, unknown"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                data:
                  errorMessage: invalid_request
                  errorDescription: Permissions are missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                data:
                  errorMessage: server_error
                  errorDescription: Failed to process the response
  /issue-refresh-token:
    post:
      tags:
        - Token
      summary: Handles refresh token issuance and validations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenIssuanceRequestBody'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForRefreshTokenGeneration'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: invalid_request
                errorDescription: Permissions are missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                xtatus: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /validate-authorization-request:
    post:
      tags:
        - Authorize
      summary: Handles pre-user authorization requests
      operationId: preUserAuthorization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreUserAuthorizationRequestBody'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200'
              examples:
                successExample:
                  summary: Success response
                  value:
                    responseId: Ec1wMjmiG8
                    status: SUCCESS
                failedExample:
                  summary: Failed response
                  value:
                    status: ERROR
                    errorCode: 401
                    errorMessage: invalid_permissions
                    erroreDescription: "The requested  permissions are invalid, unknown"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: invalid_request
                errorDescription: Permissions are missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /validate-event-subscription:
    post:
      tags:
        - Event Subscription
      summary: handle event subscription validations & storing data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSubscriptionRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForEventSubscriptionValidation'
              examples:
                successExample:
                  summary: Success response
                  value:
                    responseId: Ec1wMjmiG8
                    status: SUCCESS
                successExampleWithDetails:
                  summary: Success response With Details
                  value:
                    responseId: Ec1wMjmiG8
                    status: SUCCESS
                    data:
                      callbackUrl: https://test.com
                      version: "3.1"
                      eventTypes:
                        - eventType
                failedExample:
                  summary: Failed response
                  value:
                    status: ERROR
                    errorCode: 400
                    data:
                      error: Invalid Request
                      errorMessage: Invalid event subscription payload
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                data:
                  errorMessage: invalid_request
                  errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /enrich-event-subscription-response:
    post:
      tags:
        - Event Subscription
      summary: handle post event-subscription-creation response generation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSubscriptionRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForEnrichEventSubscription'
              examples:
                successExample:
                  summary: Success response
                  value:
                    responseId: Ec1wMjmiG8
                    status: SUCCESS
                    data:
                      eventSubscriptionResponse: { }
                failedExample:
                  summary: Failed response
                  value:
                    status: ERROR
                    errorCode: 400
                    data:
                      error: Invalid Request
                      errorMessage: Invalid event subscription payload
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: invalid_request
                errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /validate-event-creation:
    post:
      tags:
        - Event Creation
      summary: handle event creation validations & storing data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreationRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForEventValidation'
              examples:
                successExample:
                  summary: Success response
                  value:
                    responseId: Ec1wMjmiG8
                    status: SUCCESS
                failedExample:
                  summary: Failed response
                  value:
                    status: ERROR
                    errorCode: 400
                    data:
                      error: Invalid Request
                      errorMessage: Invalid event creation payload
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                data:
                  errorMessage: invalid_request
                  errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /validate-event-polling:
    post:
      tags:
        - Event Polling
      summary: handle event polling validations & storing data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventPollingRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForEventValidation'
              examples:
                successExample:
                  summary: Success response
                  value:
                    responseId: Ec1wMjmiG8
                    status: SUCCESS
                failedExample:
                  summary: Failed response
                  value:
                    status: ERROR
                    errorCode: 400
                    data:
                      error: Invalid Request
                      errorMessage: Invalid event polling payload
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                data:
                  errorMessage: invalid_request
                  errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /enrich-event-polling-response:
    post:
      tags:
        - Event Polling
      summary: handle post event-polling response generation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventPollingRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForEnrichEventPolling'
              examples:
                successExample:
                  summary: Success response
                  value:
                    responseId: Ec1wMjmiG8
                    status: SUCCESS
                    data:
                      eventPollingResponse: { }
                ffailedExample:
                  summary: Failed response
                  value:
                    status: ERROR
                    errorCode: 400
                    data:
                      error: Invalid Request
                      errorMessage: Invalid event polling payload
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: invalid_request
                errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
components:
  schemas:
    Response200ForErrorMapper:
      type: object
      properties:
        responseId:
          type: string
        errorCode:
          type: integer
        data:
          type: object
          description: Defines the custom error response.
    ErrorMapperRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/ErrorMapperData'

    ErrorMapperData:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
      description: Defines the context data related to the errors.
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code identifying the specific issue.
        description:
          type: string
          description: Detailed description of the error.
        operation:
          type: string
          description: The operation where the error occurred.
      description: Defines an error object with details.
    PostUserAuthRequestBase:
      type: object
      properties:
        requestId:
          type: string
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/PostUserAuthRequestBaseData'
    PostUserAuthResponseBase:
      type: object
      properties:
        responseId:
          type: string
          example: Ec1wMjmiG8
        status:
          type: string
          enum:
            - SUCCESS

    Request:
      type: object
      properties:
        consentInitiationData:
          type: object
          description: The initiation payload used by third parties which includes detailed information on data access request.
        consentResourcePath:
          type: string
          description: To identify requested consent type
    RequestForEnrichConsentCreationResponse:
      type: object
      properties:
        consentId:
          type: string
          description: To identify requested
        consentResource:
          $ref: '#/components/schemas/StoredDetailedConsentResourceData'
        consentResourcePath:
          type: string
          description: consent resource path
    PreProcessConsentRetrievalData:
      type: object
      properties:
        consentId:
          type: string
          description: The consent id
        consentResource:
          $ref: '#/components/schemas/StoredBasicConsentResourceData'
        consentResourcePath:
          type: string
          description: Resource url
    ConsentSearchData:
      type: object
      properties:
        searchResult:
          type: object
          description: payload
        queryParams:
          type: object
          description: query params
    PopulateConsentAuthorizeScreenData:
      type: object
      properties:
        consentId:
          type: string
          example: An UUID
        userId:
          type: string
          example: Username
        scope:
          type: string
          example: accounts payments
        consentResource:
          $ref: '#/components/schemas/StoredDetailedConsentResourceData'
    ValidateConsentAccessData:
      type: object
      properties:
        consentId:
          type: string
          description: The consent id
        consentResource:
          $ref: '#/components/schemas/StoredDetailedConsentResourceData'
        dataRequestPayload:
          type: object
          description: The receipt used by Third parties which includes detailed information on data access request
    SuccessResponse:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
    SuccessResponseTokenGeneration:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
        data:
          $ref: '#/components/schemas/SuccessResponseTokenGenerationData'
    SuccessResponseIssueRefreshTokenGeneration:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
        data:
          $ref: '#/components/schemas/SuccessResponseIssueRefreshTokenGenerationData'
    SuccessResponseConsentRevocation:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
        data:
          $ref: '#/components/schemas/SuccessResponseConsentRevocationData'

    SuccessResponsePopulateConsentAuthorizeScreen:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
        data:
          $ref: '#/components/schemas/SuccessResponsePopulateConsentAuthorizeScreenData'
    SuccessResponseForResponseAlternation:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
        data:
          $ref: '#/components/schemas/SuccessResponseForResponseAlternationData'
    SuccessResponseForConsentSearch:
      type: object
      properties:
        responseId:
          type: string
        data:
          $ref: '#/components/schemas/SuccessResponseForConsentSearchData'
    SuccessResponsePreProcessConsentCreation:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
        data:
          $ref: '#/components/schemas/SuccessResponsePreProcessConsentCreationData'
    FailedResponse:
      required:
        - data
        - errorCode
        - status
      type: object
      properties:
        status:
          type: string
          description: "Indicates the outcome of the request. For a failed operation, this should be set to ERROR."
          enum:
            - ERROR
        errorCode:
          type: integer
          description: If any custom error code to return.
        data:
          type: object
          description: :"Custom error object to response back"
    FailedResponseInConsent:
      required:
        - data
        - errorCode
        - status
      type: object
      properties:
        status:
          type: string
          description: "Indicates the outcome of the request. For a failed operation, this should be set to ERROR."
          enum:
            - ERROR
        errorCode:
          type: integer
          description: If any custom error code to return.
        data:
          type: object
          description: :"Custom error object to response back"
    ErrorResponse:
      required:
        - data
        - status
      type: object
      properties:
        status:
          type: string
          description: "Indicates the outcome of the request. For an error operation, this should be set to ERROR."
          enum:
            - ERROR
        data:
          type: object
          description: :"Custom error object to response back"
    PreProcessConsentCreationRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/Request'
    EnrichConsentCreationRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/RequestForEnrichConsentCreationResponse'
    PreProcessConsentRetrievalRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/PreProcessConsentRetrievalData'
    PreProcessBulkConsentRetrievalRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/ConsentSearchData'
    PreProcessConsentRevokeRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/PreProcessConsentRetrievalData'
    PopulateConsentAuthorizeScreenRequestBody:
      type: object
      properties:
        requestId:
          type: string
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/PopulateConsentAuthorizeScreenData'
    ValidateConsentAccessRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/ValidateConsentAccessData'
    AccessTokenGenerationRequestBody:
      type: object
      properties:
        scopes:
          type: array
          example:
            - accounts
            - payments
            - consentId
          items:
            type: string
        grantType:
          type: string
          example: authorization_code
    RefreshTokenRequestBody:
      type: object
      properties:
        grantType:
          type: string
          example: authorization_code
        consentCreatedTime:
          type: integer
          format: int64
        consentValidityPeriod:
          type: integer
          format: int64
        defaultRefreshTokenValidityPeriod:
          type: integer
          format: int64
    PreAccessTokenGenerationRequestBody:
      type: object
      properties:
        requestId:
          type: string
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/AccessTokenGenerationRequestBody'
    RefreshTokenIssuanceRequestBody:
      type: object
      properties:
        requestId:
          type: string
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/RefreshTokenRequestBody'
    PreUserAuthorizationRequestBody:
      type: object
      properties:
        requestId:
          type: string
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/PreUserAuthorizationRequestBodyData'
    Response200ForPreProcessConsentCreation:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponsePreProcessConsentCreation'
        - $ref: '#/components/schemas/FailedResponseInConsent'
    Response200ForResponseAlternation:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponseForResponseAlternation'
        - $ref: '#/components/schemas/FailedResponseInConsent'
    Response200ForConsentSearch:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponseForConsentSearch'
        - $ref: '#/components/schemas/FailedResponseInConsent'
    Response200:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - $ref: '#/components/schemas/FailedResponse'
    Response200ForConsentRevocation:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponseConsentRevocation'
        - $ref: '#/components/schemas/FailedResponse'
    Response200ForPopulateConsentAuthorizeScreen:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponsePopulateConsentAuthorizeScreen'
        - $ref: '#/components/schemas/FailedResponse'
    Response200ForRefreshTokenGeneration:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponseIssueRefreshTokenGeneration'
        - $ref: '#/components/schemas/FailedResponse'
    RequestBaseData:
      type: object
      properties:
        userId:
          type: string
          example: ben@wso2.com
        consentId:
          type: string
          example: "123"
    ResponseBase_data_claims:
      type: object
      properties:
        key:
          type: string
          example: claim1
        value:
          type: string
          example: "123"
    ResponseBaseData:
      type: object
      properties:
        claims:
          type: array
          example:
            - key: claim1
              value: "123"
            - key: claim2
              value: "456"
          items:
            $ref: '#/components/schemas/ResponseBase_data_claims'
    PostUserAuthRequestBaseData:
      type: object
      properties:
        scopes:
          type: array
          example:
            - accounts
            - payments
          items:
            type: string
        consentId:
          type: string
          example: "123"
        validityPeriod:
          type: integer
          example: 1000
    PostUserAuthRefreshTokenResponseData:
      type: object
      properties:
        refreshTokenValidityPeriod:
          type: integer
          example: 1000
    PostUserAuthApprovedScopesResponseData:
      type: object
      properties:
        approvedScopes:
          type: array
          example:
            - accounts
            - payments
            - consentId
          items:
            type: string
    SuccessResponseTokenGenerationDataParameters:
      type: object
      properties:
        key:
          type: string
          example: consent-id
        value:
          type: string
          example: "123"
    SuccessResponseTokenGenerationData:
      type: object
      properties:
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/SuccessResponseTokenGenerationDataParameters'
    SuccessResponseIssueRefreshTokenGenerationData:
      type: object
      properties:
        issueRefreshToken:
          type: boolean
        refreshTokenValidityPeriod:
          type: integer
          format: int64
    SuccessResponseConsentRevocationData:
      type: object
      properties:
        revocationStatusName:
          type: string
          description: Name for the revoked status
        requireTokenRevocation:
          type: string
          description: Require access token to be revoked
    SuccessResponseConsentRevocationAdminData:
      type: object
      properties:
        revocationStatusName:
          type: string
          description: Name for the revoked status
        revocationReason:
          type: string
          description: Reason for the revoked event
        requireTokenRevocation:
          type: boolean
          description: Require access token to be revoked
    SuccessResponsePopulateConsentAuthorizeScreenData:
      type: object
      properties:
        consentData:
          type: object
          description: consent data to be populated on consent grant UI
        consumerData:
          type: object
          description: Data provider's backend data
    SuccessResponseForResponseAlternationData:
      type: object
      properties:
        modifiedResponse:
          type: object
          description: Generated custom response body
    SuccessResponseForConsentSearchData:
      type: object
      properties:
        searchResult:
          type: object
          description: Enriched search result
    SuccessResponsePreProcessConsentCreationData:
      type: object
      properties:
        consentResource:
          $ref: '#/components/schemas/DetailedConsentResourceData'
    PreUserAuthorizationRequestBodyData:
      type: object
      properties:
        requestObject:
          type: object
      description: full request object
    PersistAuthorizedConsentRequestBody:
      type: object
      properties:
        requestId:
          type: string
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/PersistAuthorizedConsent'
    PersistAuthorizedConsent:
      type: object
      properties:
        consentId:
          type: string
        isApproved:
          type: boolean
        userGrantedData:
          type: object
          description: "Input data from end user"
        consentResource:
          $ref: '#/components/schemas/StoredDetailedConsentResourceData'
    Response200ForPersistAuthorizedConsent:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponsePersistAuthorizedConsent'
        - $ref: '#/components/schemas/FailedResponseInConsent'
    SuccessResponsePersistAuthorizedConsent:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
        data:
          oneOf:
            - $ref: '#/components/schemas/SuccessResponsePersistAuthorizedConsentData'
            - $ref: '#/components/schemas/SuccessPersistAuthorizedConsentWithAmendmentsData'
    SuccessResponsePersistAuthorizedConsentData:
      type: object
      properties:
        consentResource:
          $ref: '#/components/schemas/DetailedConsentResourceData'
    SuccessPersistAuthorizedConsentWithAmendmentsData:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ConsentPersistenceSuccessDataWithAmendments'
    BasicConsentResourceData:
      type: object
      properties:
        receipt:
          type: object
        type:
          type: string
        status:
          type: string
        frequency:
          type: integer
        validityTime:
          type: integer
          format: int64
        recurringIndicator:
          type: boolean
        attributes:
          type: object
    DetailedConsentResourceData:
      type: object
      properties:
        type:
          type: string
        status:
          type: string
        validityTime:
          type: integer
          format: int64
        recurringIndicator:
          type: boolean
        frequency:
          type: integer
        receipt:
          type: object
        attributes:
          type: object
        authorizations:
          type: array
          items:
            $ref: '#/components/schemas/Authorization'
    ConsentPersistenceSuccessDataWithAmendments:
      type: object
      properties:
        consentType:
          type: string
        consentStatus:
          type: string
        validityTime:
          type: integer
          format: int64
        recurringIndicator:
          type: boolean
        frequency:
          type: integer
        consentPayload:
          type: object
        authorizations:
          type: array
          items:
            $ref: '#/components/schemas/Authorization'
        amendments:
          type: array
          items:
            $ref: '#/components/schemas/AmendedAuthorization'
    StoredBasicConsentResourceData:
      type: object
      properties:
        id:
          type: string
        receipt:
          type: object
        createdTime:
          type: integer
          format: int32
        updatedTime:
          type: integer
          format: int32
        clientId:
          type: string
        type:
          type: string
        status:
          type: string
        frequency:
          type: integer
        validityTime:
          type: integer
          format: int32
        recurringIndicator:
          type: boolean
        attributes:
          type: object
    StoredDetailedConsentResourceData:
      type: object
      properties:
        id:
          type: string
        receipt:
          type: object
        createdTime:
          type: integer
          format: int32
        updatedTime:
          type: integer
          format: int32
        clientId:
          type: string
        type:
          type: string
        status:
          type: string
        frequency:
          type: integer
        validityTime:
          type: integer
          format: int32
        recurringIndicator:
          type: boolean
        attributes:
          type: object
        authorizations:
          type: array
          items:
            $ref: '#/components/schemas/StoredAuthorization'
    Authorization:
      type: object
      properties:
        userId:
          type: string
        type:
          type: string
        status:
          type: string
        resources:
          type: array
          items:
            $ref: '#/components/schemas/Resource'
    AmendedAuthorization:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        status:
          type: string
        resources:
          type: array
          items:
            $ref: '#/components/schemas/Resource'
        amendedResources:
          type: array
          items:
            $ref: '#/components/schemas/AmendedResource'
    StoredAuthorization:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        type:
          type: string
        status:
          type: string
        resources:
          type: array
          items:
            $ref: '#/components/schemas/StoredResource'
    Resource:
      type: object
      properties:
        accountId:
          type: string
        permission:
          type: string
        status:
          type: string
    AmendedResource:
      type: object
      properties:
        id:
          type: string
        permission:
          type: string
        status:
          type: string
    StoredResource:
      type: object
      properties:
        id:
          type: string
        accountId:
          type: string
        permission:
          type: string
        status:
          type: string
    Response200ForClientProcess:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponseClientProcess'
        - $ref: '#/components/schemas/FailedResponseClientProcess'
    ClientProcessRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/ClientProcessData'
    ClientProcessData:
      type: object
      properties:
        clientData:
          type: object
          description: Client Registration Data. Mandatory for pre-process-client-creation and pre-process-client-update.
        softwareStatement:
          type: object
          description: "Parameters of the decoded SSA. Mandatory for pre-process-client-creation, pre-process-client-update and pre-process-client-retrieval."
        existingClientData:
          type: object
          description: properties of the existing client application. Mandatory for pre-process-client-update.
      description: Defines the context data related to the client registration.
    SuccessResponseClientProcess:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
        data:
          $ref: '#/components/schemas/SuccessResponseClientProcess_data'
    SuccessResponseClientProcess_data:
      type: object
      properties:
        clientData:
          type: object
      description: Defines the success response.
    FailedResponseClientProcess:
      required:
        - data
        - status
      type: object
      properties:
        status:
          type: string
          description: "Indicates the outcome of the request. For a failed operation, this should be set to ERROR."
          enum:
            - ERROR
        errorCode:
          type: integer
          description: If any custom error code to return.
        data:
          $ref: '#/components/schemas/FailedResponseClientProcess_data'
    FailedResponseClientProcess_data:
      type: object
      properties:
        error:
          type: string
          description: Provides the error code for error.
          enum:
            - invalid_client_metadata
            - invalid_redirect_uri
            - invalid_software_statement
        errorDescription:
          type: string
          description: Offers a detailed explanation of the error.
    EventSubscriptionRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/EventSubscriptionRequest'
    EventSubscriptionRequest:
      type: object
      properties:
        eventType:
          type: string
          enum:
            - SubscriptionCreation
            - SingleSubscriptionRetrieval
            - BulkSubscriptionRetrieval
            - SubscriptionRetrievalForEventTypes
            - SubscriptionUpdate
            - SubscriptionDelete
        eventSubscriptionData:
          type: object
          description: Event Subscription Payload
    EventCreationRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/EventCreationRequest'
    EventCreationRequest:
      type: object
      properties:
        eventData:
          type: object
          description: Event creation Payload
    EventPollingRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/EventPollingRequest'
    EventPollingRequest:
      type: object
      properties:
        eventPollingData:
          type: object
          description: Event polling data
    Response200ForEventSubscriptionValidation:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponseForEvent'
        - $ref: '#/components/schemas/SuccessResponseForEventWithDetails'
        - $ref: '#/components/schemas/FailedResponseForEvent'
    Response200ForEventValidation:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponseForEvent'
        - $ref: '#/components/schemas/FailedResponseForEvent'
    Response200ForEnrichEventSubscription:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponseForEnrichEventSubscription'
        - $ref: '#/components/schemas/FailedResponseForEvent'
    Response200ForEnrichEventPolling:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponseForEnrichEventPolling'
        - $ref: '#/components/schemas/FailedResponseForEvent'
    SuccessResponseForEvent:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
    SuccessResponseForEventWithDetails:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
        data:
          $ref: '#/components/schemas/SuccessResponseForEventWithDetails_data'
    SuccessResponseForEventWithDetails_data:
      type: object
      properties:
        callbackUrl:
          type: string
        version:
          type: string
        eventTypes:
          type: array
          items:
            type: string
    SuccessResponseForEnrichEventSubscription:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
        data:
          $ref: '#/components/schemas/SuccessResponseForEnrichEventSubscription_data'
    SuccessResponseForEnrichEventSubscription_data:
      type: object
      properties:
        eventSubscriptionResponse:
          type: object
          description: Event Subscription Response
    SuccessResponseForEnrichEventPolling:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
        data:
          $ref: '#/components/schemas/SuccessResponseForEnrichEventPolling_data'
    SuccessResponseForEnrichEventPolling_data:
      type: object
      properties:
        eventPollingResponse:
          type: object
          description: Event Polling Response
    FailedResponseForEvent:
      required:
        - data
        - errorCode
        - status
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          description: "Indicates the outcome of the request. For a failed operation, this should be set to ERROR."
          enum:
            - ERROR
        errorCode:
          type: integer
          description: If any custom error code to return.
        data:
          $ref: '#/components/schemas/FailedResponseForEvent_data'
    FailedResponseForEvent_data:
      type: object
    Response200ForPreTokenIntrospection_data:
      type: object
      properties:
        attributes:
          type: array
          example:
            - key: attribute1
              value: "123"
            - key: attribute2
              value: "456"
          items:
            $ref: '#/components/schemas/ResponseBase_data_claims'
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://example.com/oauth/token
          scopes:
            process: process request generate response